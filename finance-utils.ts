// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–∫–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞)
export interface FinancialData {
  advertId: number;
  date: string;
  sum: number;
  bill: number;
  type: string;
  docNumber: string;
  campName?: string;
}

export interface CampaignInfo {
  advertId: number;
  name: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π –∫ –¥–∞—Ç–µ (—Ç–æ—á–Ω–æ –∫–∞–∫ —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞)
export function addDays(date: Date, days: number): Date {
  const result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã (—Ç–æ—á–Ω–æ –∫–∞–∫ —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞)
export function formatDate(date: Date): string {
  return date.toISOString().split('T')[0];
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –∫–∞–º–ø–∞–Ω–∏–π (–ª–æ–≥–∏–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞)
export async function fetchCampaignSkus(apiKey: string, campaigns: CampaignInfo[]): Promise<Map<number, string>> {
  const skusMap = new Map<number, string>();
  
  try {
    console.log(`üìä –ó–∞–ø—Ä–æ—Å SKU –¥–ª—è ${campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π...`);
    
    const campaignIds = campaigns.map(c => c.advertId);
    const batchSize = 50; // –ú–∞–∫—Å–∏–º—É–º 50 ID –≤ –∑–∞–ø—Ä–æ—Å–µ

    for (let i = 0; i < campaignIds.length; i += batchSize) {
      const batchIds = campaignIds.slice(i, i + batchSize);
      
      try {
        const response = await fetch('https://advert-api.wildberries.ru/adv/v1/promotion/adverts', {
          method: 'POST',
          headers: {
            'Authorization': apiKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(batchIds)
        });

        if (response.ok) {
          const campaignsData = await response.json();
          if (Array.isArray(campaignsData)) {
            campaignsData.forEach(campaignData => {
              if (campaignData && campaignData.advertId) {
                const skus: (number | string)[] = [];

                // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π (type 8)
                if (campaignData.type === 8 && campaignData.autoParams && Array.isArray(campaignData.autoParams.nms)) {
                  skus.push(...campaignData.autoParams.nms);
                }

                // –î–ª—è –∞—É–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π (type 9)
                if (campaignData.type === 9 && Array.isArray(campaignData.auction_multibids)) {
                  const auctionSkus = campaignData.auction_multibids
                    .map((bid: { nm: number }) => bid.nm)
                    .filter(Boolean);
                  skus.push(...auctionSkus);
                }
                
                // –û–±—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞–º–ø–∞–Ω–∏–π
                if (Array.isArray(campaignData.unitedParams)) {
                  const unitedSkus = campaignData.unitedParams
                    .flatMap((p: { nms?: {nm: number}[] }) => p.nms || [])
                    .map((nm: {nm: number}) => nm.nm)
                    .filter(Boolean);
                  skus.push(...unitedSkus);
                }

                const uniqueSkus = [...new Set(skus)];
                const skusString = uniqueSkus.join(', ');
                skusMap.set(campaignData.advertId, skusString || '–ù–µ—Ç SKU');
              }
            });
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ SKU –¥–ª—è –ø–∞–∫–µ—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–π:`, error);
        batchIds.forEach(id => skusMap.set(id, '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞'));
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
      if (campaignIds.length > i + batchSize) {
        await new Promise(r => setTimeout(r, 250));
      }
    }

    return skusMap;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SKU –∫–∞–º–ø–∞–Ω–∏–π:', error);
    return skusMap;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–≥–∏–∫–æ–π –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–Ω–µ–π (—Ç–æ—á–Ω–æ –∫–∞–∫ —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞)
export async function fetchFinancialData(apiKey: string, startDate: string, endDate: string): Promise<FinancialData[]> {
  try {
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${startDate} - ${endDate}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω—ã–µ –¥–Ω–∏
    const originalStart = new Date(startDate);
    const originalEnd = new Date(endDate);
    const bufferStart = addDays(originalStart, -1);
    const bufferEnd = addDays(originalEnd, 1);
    
    const adjustedStartDate = formatDate(bufferStart);
    const adjustedEndDate = formatDate(bufferEnd);
    
    console.log(`üìÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –±—É—Ñ–µ—Ä–Ω—ã–º–∏ –¥–Ω—è–º–∏: ${adjustedStartDate} - ${adjustedEndDate}`);
    
    const response = await fetch(`https://advert-api.wildberries.ru/adv/v1/upd?from=${adjustedStartDate}&to=${adjustedEndDate}`, {
      method: 'GET',
      headers: {
        'Authorization': apiKey,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${response.status} ${response.statusText}`);
      return [];
    }

    const data = await response.json();
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const financialData: FinancialData[] = data.map((record: any) => ({
      advertId: record.advertId,
      date: record.updTime ? new Date(record.updTime).toISOString().split('T')[0] : '',
      sum: record.updSum || 0,
      bill: record.paymentType === '–°—á–µ—Ç' ? 1 : 0,
      type: record.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      docNumber: record.updNum || '',
      campName: record.campName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è'
    }));
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–Ω–µ–π
    const filteredData = applyBufferDayLogic(financialData, originalStart, originalEnd);
    
    return filteredData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return [];
  }
}

// –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–Ω–µ–π (—Ç–æ—á–Ω–æ –∫–∞–∫ —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞)
export function applyBufferDayLogic(data: FinancialData[], originalStart: Date, originalEnd: Date): FinancialData[] {
  const originalStartStr = formatDate(originalStart);
  const originalEndStr = formatDate(originalEnd);
  const bufferStartStr = formatDate(addDays(originalStart, -1));
  const bufferEndStr = formatDate(addDays(originalEnd, 1));
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  const mainPeriodData = data.filter(record => 
    record.date >= originalStartStr && record.date <= originalEndStr
  );
  
  const previousBufferData = data.filter(record => record.date === bufferStartStr);
  const nextBufferData = data.filter(record => record.date === bufferEndStr);
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  const mainDocNumbers = new Set(mainPeriodData.map(record => record.docNumber));
  
  // –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –¥–Ω—è
  const nextBufferDocNumbers = new Set(nextBufferData.map(record => record.docNumber));
  const filteredMainData = mainPeriodData.filter(record => !nextBufferDocNumbers.has(record.docNumber));
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const previousBufferToAdd = previousBufferData.filter(record => 
    mainDocNumbers.has(record.docNumber) && previousBufferData.filter(r => r.docNumber === record.docNumber).length >= 2
  );
  
  const result = [...filteredMainData, ...previousBufferToAdd];
  
  return result;
}

