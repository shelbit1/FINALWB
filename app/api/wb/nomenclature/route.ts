export const runtime = "nodejs";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
interface NomenclatureSize {
  chrtID: number;
  techSize: string;
  wbSize: string;
  skus: string[];
}

interface NomenclatureDimensions {
  length: number;
  width: number;
  height: number;
}

interface NomenclatureCard {
  nmID: number;
  imtID: number;
  vendorCode: string;
  brand: string;
  title: string;
  object: string;
  dimensions: NomenclatureDimensions;
  sizes: NomenclatureSize[];
  createdAt: string;
  updatedAt: string;
  isProhibited: boolean;
  photos: Record<string, unknown>[];
  video: string;
  status: number;
  tags: Record<string, unknown>[];
  characteristics: Record<string, unknown>[];
}

interface NomenclatureResponse {
  cards: NomenclatureCard[];
  cursor: {
    updatedAt: string;
    nmID: number;
    total: number;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–∞ (–∞–Ω–∞–ª–æ–≥ _readOBJ) - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
// function readObjectProperty(obj: Record<string, unknown>, key: string, separator: string = '.'): unknown {
//   if (!obj || !key) return '';
//   
//   let value: unknown = obj;
//   const keys = key.split(separator);
//   
//   try {
//     for (const k of keys) {
//       if (value === null || value === undefined) return '';
//       value = (value as Record<string, unknown>)[k];
//     }
//     return value !== undefined ? value : '';
//   } catch {
//     return '';
//   }
// }

export async function POST(request: Request) {
  try {
    const { token } = (await request.json()) as {
      token?: string;
    };

    if (!token) {
      return new Response(
        JSON.stringify({ error: "token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    console.log("üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤");

    const base = "https://content-api.wildberries.ru/content/v2/get/cards/list?locale=ru";
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Excel (—É–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)
    // const headers = [
    //   'nmID',
    //   'imtID', 
    //   'vendorCode',
    //   'brand',
    //   'title',
    //   'object',
    //   'dimensions.length',
    //   'dimensions.width', 
    //   'dimensions.height',
    //   'calc_volume',
    //   'createdAt',
    //   'updatedAt',
    //   'isProhibited',
    //   'status',
    //   '[sizes.chrtID]',
    //   '[sizes.techSize]',
    //   '[sizes.wbSize]',
    //   '[sizes.skus]',
    //   'dt'
    // ];

    const allData: Record<string, unknown>[] = [];
    const cursor: Record<string, unknown> = { limit: 100 };
    let hasMore = true;
    let requestCount = 0;
    const maxRequests = 50; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤

    console.log("üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤...");

    while (hasMore && requestCount < maxRequests) {
      requestCount++;
      console.log(`‚è≥ –ó–∞–ø—Ä–æ—Å ${requestCount}, cursor:`, cursor);

      const requestBody = {
        settings: {
          sort: {
            ascending: false
          },
          filter: {
            withPhoto: -1 // -1 ‚Äî –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
          },
          cursor
        }
      };

      const response = await fetch(base, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": token,
        },
        body: JSON.stringify(requestBody),
        cache: "no-store",
      });

      if (!response.ok) {
        const text = await response.text();
        return new Response(
          JSON.stringify({ error: text || `WB error ${response.status}` }),
          { status: response.status, headers: { "Content-Type": "application/json" } }
        );
      }

      const data: NomenclatureResponse = await response.json();
      
      if (!data.cards || !Array.isArray(data.cards)) {
        console.log("‚ö†Ô∏è –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –æ—Ç–≤–µ—Ç–µ");
        break;
      }

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);

      // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.MM.yyyy
      const currentDate = new Date().toLocaleDateString('ru-RU');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
      data.cards.forEach((card) => {
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—ä–µ–º (–¥–ª–∏–Ω–∞ * —à–∏—Ä–∏–Ω–∞ * –≤—ã—Å–æ—Ç–∞ / 1000)
        const calcVolume = (card.dimensions?.length || 0) * 
                          (card.dimensions?.width || 0) * 
                          (card.dimensions?.height || 0) / 1000;

        // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        const baseRow: Record<string, unknown> = {};
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        baseRow['nmID'] = card.nmID;
        baseRow['imtID'] = card.imtID;
        baseRow['vendorCode'] = card.vendorCode;
        baseRow['brand'] = card.brand;
        baseRow['title'] = card.title;
        baseRow['object'] = card.object;
        baseRow['dimensions.length'] = card.dimensions?.length || 0;
        baseRow['dimensions.width'] = card.dimensions?.width || 0;
        baseRow['dimensions.height'] = card.dimensions?.height || 0;
        baseRow['calc_volume'] = calcVolume;
        baseRow['createdAt'] = card.createdAt;
        baseRow['updatedAt'] = card.updatedAt;
        baseRow['isProhibited'] = card.isProhibited;
        baseRow['status'] = card.status;
        baseRow['dt'] = currentDate;

        // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        if (!card.sizes || card.sizes.length === 0) {
          baseRow['[sizes.chrtID]'] = '';
          baseRow['[sizes.techSize]'] = '';
          baseRow['[sizes.wbSize]'] = '';
          baseRow['[sizes.skus]'] = '';
          allData.push(baseRow);
        } else {
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
          card.sizes.forEach((size) => {
            const sizeRow = { ...baseRow };
            sizeRow['[sizes.chrtID]'] = size.chrtID;
            sizeRow['[sizes.techSize]'] = size.techSize;
            sizeRow['[sizes.wbSize]'] = size.wbSize;
            sizeRow['[sizes.skus]'] = size.skus ? size.skus.join(';\n') : '';
            allData.push(sizeRow);
          });
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      if (data.cursor.total < 100) {
        hasMore = false;
      } else {
        cursor.updatedAt = data.cursor.updatedAt;
        cursor.nmID = data.cursor.nmID;
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
        await new Promise(resolve => setTimeout(resolve, 1100));
      }
    }

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${allData.length}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Excel
    const rows = allData.map((item) => ({
      "ID —Ç–æ–≤–∞—Ä–∞": item.nmID,
      "ID –ø—Ä–µ–¥–º–µ—Ç–∞": item.imtID,
      "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞": item.vendorCode,
      "–ë—Ä–µ–Ω–¥": item.brand,
      "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": item.title,
      "–ü—Ä–µ–¥–º–µ—Ç": item.object,
      "–î–ª–∏–Ω–∞ (—Å–º)": item['dimensions.length'],
      "–®–∏—Ä–∏–Ω–∞ (—Å–º)": item['dimensions.width'],
      "–í—ã—Å–æ—Ç–∞ (—Å–º)": item['dimensions.height'],
      "–û–±—ä–µ–º (–ª)": item.calc_volume,
      "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": item.createdAt,
      "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": item.updatedAt,
      "–ó–∞–ø—Ä–µ—â–µ–Ω": item.isProhibited ? "–î–∞" : "–ù–µ—Ç",
      "–°—Ç–∞—Ç—É—Å": item.status,
      "ID —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": item['[sizes.chrtID]'],
      "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä": item['[sizes.techSize]'],
      "–†–∞–∑–º–µ—Ä WB": item['[sizes.wbSize]'],
      "SKU": item['[sizes.skus]'],
      "–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏": item.dt,
      "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": ""
    }));

    const fields = [
      "ID —Ç–æ–≤–∞—Ä–∞",
      "ID –ø—Ä–µ–¥–º–µ—Ç–∞", 
      "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞",
      "–ë—Ä–µ–Ω–¥",
      "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
      "–ü—Ä–µ–¥–º–µ—Ç",
      "–î–ª–∏–Ω–∞ (—Å–º)",
      "–®–∏—Ä–∏–Ω–∞ (—Å–º)",
      "–í—ã—Å–æ—Ç–∞ (—Å–º)",
      "–û–±—ä–µ–º (–ª)",
      "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
      "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
      "–ó–∞–ø—Ä–µ—â–µ–Ω",
      "–°—Ç–∞—Ç—É—Å",
      "ID —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
      "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä",
      "–†–∞–∑–º–µ—Ä WB",
      "SKU",
      "–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏",
      "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"
    ];

    return new Response(
      JSON.stringify({ fields, rows }),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error);
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', message);
    return new Response(
      JSON.stringify({ error: message || "Internal Server Error" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}
