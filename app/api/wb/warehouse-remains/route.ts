export const runtime = "nodejs";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
interface WarehouseItem {
  warehouseName: string;
  whId: number;
  quantity: number;
  inWayToClient: number;
  inWayFromClient: number;
}

interface WarehouseRemainsItem {
  brand: string;
  subjectName: string;
  vendorCode: string;
  nmId: number;
  barcode: string;
  techSize: string;
  volume?: number;
  warehouses: WarehouseItem[];
}

export async function POST(request: Request) {
  try {
    const { token } = (await request.json()) as {
      token?: string;
    };

    if (!token) {
      return new Response(
        JSON.stringify({ error: "token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    console.log("üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö");

    const base = "https://seller-analytics-api.wildberries.ru/api/v1/warehouse_remains";

    // 1) –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö...");
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const params = new URLSearchParams({
      locale: "ru",
      groupByBrand: "true",
      groupBySubject: "true", 
      groupBySa: "true",
      groupByNm: "true",
      groupByBarcode: "true",
      groupBySize: "true",
      filterPics: "0", // –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ—Ç–æ
      filterVolume: "0" // –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É
    });

    const startRes = await fetch(`${base}?${params.toString()}`, {
      method: "GET",
      headers: {
        Authorization: token,
        "Content-Type": "application/json",
      },
      cache: "no-store",
    });

    if (!startRes.ok) {
      const text = await startRes.text();
      return new Response(
        JSON.stringify({ error: text || `WB error ${startRes.status}` }),
        { status: startRes.status, headers: { "Content-Type": "application/json" } }
      );
    }

    const startJson = (await startRes.json()) as unknown;
    let taskId: string | undefined;
    
    if (
      typeof startJson === "object" &&
      startJson !== null &&
      "data" in (startJson as Record<string, unknown>)
    ) {
      const data = (startJson as Record<string, unknown>).data;
      if (typeof data === "object" && data !== null && "taskId" in data) {
        const t = (data as Record<string, unknown>).taskId;
        if (typeof t === "string") taskId = t;
      }
    }

    if (!taskId) {
      return new Response(
        JSON.stringify({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å taskId" }),
        { status: 502, headers: { "Content-Type": "application/json" } }
      );
    }

    console.log(`üìã –ü–æ–ª—É—á–µ–Ω taskId: ${taskId}`);

    // 2) –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
    const statusUrl = `${base}/tasks/${encodeURIComponent(taskId)}/status`;
    let isDone = false;
    
    // –º–∞–∫—Å–∏–º—É–º ~15 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 5 —Å–µ–∫—É–Ω–¥ = ~75 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
    for (let i = 0; i < 15; i++) {
      console.log(`‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞, –ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/15...`);
      
      const stRes = await fetch(statusUrl, {
        method: "GET",
        headers: {
          Authorization: token,
          "Content-Type": "application/json",
        },
        cache: "no-store",
      });

      if (!stRes.ok) {
        const text = await stRes.text();
        return new Response(
          JSON.stringify({ error: text || `WB error ${stRes.status}` }),
          { status: stRes.status, headers: { "Content-Type": "application/json" } }
        );
      }

      const stJson = (await stRes.json()) as unknown;
      let status: string | undefined;
      
      if (
        typeof stJson === "object" &&
        stJson !== null &&
        "data" in (stJson as Record<string, unknown>)
      ) {
        const data = (stJson as Record<string, unknown>).data;
        if (typeof data === "object" && data !== null && "status" in data) {
          const s = (data as Record<string, unknown>).status;
          if (typeof s === "string") status = s;
        }
      }

      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞: ${status}`);

      if (status === "done") {
        isDone = true;
        break;
      }
      
      // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      if (i < 14) {
        await new Promise((r) => setTimeout(r, 5000));
      }
    }

    if (!isDone) {
      return new Response(
        JSON.stringify({ error: "–û—Ç—á–µ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è (75 —Å–µ–∫—É–Ω–¥)" }),
        { status: 504, headers: { "Content-Type": "application/json" } }
      );
    }

    // 3) –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    console.log("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö...");
    const downloadUrl = `${base}/tasks/${encodeURIComponent(taskId)}/download`;
    const dlRes = await fetch(downloadUrl, {
      method: "GET",
      headers: {
        Authorization: token,
        "Content-Type": "application/json",
      },
      cache: "no-store",
    });

    if (!dlRes.ok) {
      const text = await dlRes.text();
      return new Response(
        JSON.stringify({ error: text || `WB error ${dlRes.status}` }),
        { status: dlRes.status, headers: { "Content-Type": "application/json" } }
      );
    }

    const warehouseData = (await dlRes.json()) as unknown;
    
    if (!Array.isArray(warehouseData)) {
      return new Response(
        JSON.stringify({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ download" }),
        { status: 502, headers: { "Content-Type": "application/json" } }
      );
    }

    const items = warehouseData as WarehouseRemainsItem[];
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${items.length} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Excel
    const rows: Record<string, unknown>[] = [];
    const currentDate = new Date().toLocaleDateString('ru-RU');

    items.forEach((item) => {
      if (!item.warehouses || item.warehouses.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∫–ª–∞–¥–∞–º, –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –±–µ–∑ —Å–∫–ª–∞–¥–∞
        rows.push({
          "–ë—Ä–µ–Ω–¥": item.brand || "",
          "–ü—Ä–µ–¥–º–µ—Ç": item.subjectName || "",
          "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞": item.vendorCode || "",
          "–ê—Ä—Ç–∏–∫—É–ª WB": item.nmId || "",
          "–®—Ç—Ä–∏—Ö–∫–æ–¥": item.barcode || "",
          "–†–∞–∑–º–µ—Ä": item.techSize || "",
          "–û–±—ä–µ–º (–ª)": item.volume || "",
          "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞": "",
          "ID —Å–∫–ª–∞–¥–∞": "",
          "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 0,
          "–í –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É": 0,
          "–í –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞": 0,
          "–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏": currentDate
        });
      } else {
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        item.warehouses.forEach((warehouse) => {
          rows.push({
            "–ë—Ä–µ–Ω–¥": item.brand || "",
            "–ü—Ä–µ–¥–º–µ—Ç": item.subjectName || "",
            "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞": item.vendorCode || "",
            "–ê—Ä—Ç–∏–∫—É–ª WB": item.nmId || "",
            "–®—Ç—Ä–∏—Ö–∫–æ–¥": item.barcode || "",
            "–†–∞–∑–º–µ—Ä": item.techSize || "",
            "–û–±—ä–µ–º (–ª)": item.volume || "",
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞": warehouse.warehouseName || "",
            "ID —Å–∫–ª–∞–¥–∞": warehouse.whId || "",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": warehouse.quantity || 0,
            "–í –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É": warehouse.inWayToClient || 0,
            "–í –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞": warehouse.inWayFromClient || 0,
            "–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏": currentDate
          });
        });
      }
    });

    const fields = [
      "–ë—Ä–µ–Ω–¥",
      "–ü—Ä–µ–¥–º–µ—Ç",
      "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞",
      "–ê—Ä—Ç–∏–∫—É–ª WB",
      "–®—Ç—Ä–∏—Ö–∫–æ–¥",
      "–†–∞–∑–º–µ—Ä",
      "–û–±—ä–µ–º (–ª)",
      "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞",
      "ID —Å–∫–ª–∞–¥–∞",
      "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
      "–í –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É",
      "–í –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞",
      "–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏"
    ];

    return new Response(
      JSON.stringify({ fields, rows }),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error);
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:', message);
    return new Response(
      JSON.stringify({ error: message || "Internal Server Error" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}
