export const runtime = "nodejs";

import { fetchFinancialData, fetchCampaignSkus } from "@/utils/finance-rk";

const FIELD_ORDER: string[] = [
  "advertId",
  "campName",
  "date", 
  "sum",
  "bill",
  "type",
  "docNumber",
  "skuIds",
  "reportPeriod"
];

export async function POST(request: Request) {
  try {
    const { token, dateFrom, dateTo } = (await request.json()) as {
      token?: string;
      dateFrom?: string;
      dateTo?: string;
    };

    if (!token || !dateFrom || !dateTo) {
      return new Response(
        JSON.stringify({ error: "token, dateFrom –∏ dateTo –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    console.log('üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –†–ö...');
    const financeStartTime = Date.now();

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±—É—Ñ–µ—Ä–Ω—ã–º–∏ –¥–Ω—è–º–∏
    const financialData = await fetchFinancialData(token, dateFrom, dateTo);

    console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏—Å—Ç–∞ "–§–∏–Ω–∞–Ω—Å—ã –†–ö". –§–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${financialData.length}`);

    if (financialData.length > 0) {
      // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const uniqueCampaigns = new Map<number, { advertId: number; name: string }>();
      financialData.forEach(record => {
        if (!uniqueCampaigns.has(record.advertId)) {
          uniqueCampaigns.set(record.advertId, {
            advertId: record.advertId,
            name: record.campName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è'
          });
        }
      });
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: ${uniqueCampaigns.size}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ SKU ID
      const campaignsArray = Array.from(uniqueCampaigns.values());
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–π...`);
      const skusMap = await fetchCampaignSkus(token, campaignsArray);
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: ${skusMap.size} –∫–∞–º–ø–∞–Ω–∏–π`);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏—Å—Ç–∞ "–§–∏–Ω–∞–Ω—Å—ã –†–ö"
      const reportPeriod = `${new Date(dateFrom).toLocaleDateString('ru-RU')} - ${new Date(dateTo).toLocaleDateString('ru-RU')}`;
      
      const rows = financialData.map(record => {
        const ordered: Record<string, unknown> = {};
        
        const rowData = {
          advertId: record.advertId,
          campName: record.campName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è',
          date: record.date,
          sum: record.sum,
          bill: record.bill === 1 ? '–°—á–µ—Ç' : '–ë–∞–ª–∞–Ω—Å',
          type: record.type,
          docNumber: record.docNumber,
          skuIds: skusMap.get(record.advertId) || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
          reportPeriod: reportPeriod
        };
        
        for (const key of FIELD_ORDER) {
          ordered[key] = (rowData as any)[key] ?? "";
        }
        
        return ordered;
      });

      console.log(`‚úÖ –õ–∏—Å—Ç "–§–∏–Ω–∞–Ω—Å—ã –†–ö" –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∑–∞ ${Date.now() - financeStartTime}ms —Å ${rows.length} –∑–∞–ø–∏—Å—è–º–∏`);

      return new Response(
        JSON.stringify({ fields: FIELD_ORDER, rows }),
        { status: 200, headers: { "Content-Type": "application/json" } }
      );
    } else {
      console.log("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ '–§–∏–Ω–∞–Ω—Å—ã –†–ö' - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
      
      return new Response(
        JSON.stringify({ fields: FIELD_ORDER, rows: [] }),
        { status: 200, headers: { "Content-Type": "application/json" } }
      );
    }

  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error);
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –†–ö:', message);
    return new Response(
      JSON.stringify({ error: message || "Internal Server Error" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}